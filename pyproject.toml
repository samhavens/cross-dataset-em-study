[tool.ruff]
# Same as Black.
line-length = 120
indent-width = 4

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "data",
    "results",
    ".embeddings_cache",
    ".sweep_cache",
    "zeroer",
    "unicorn", 
    "matchgpt",
    "openai",
    "jellyfish",
    "ditto",
    "anymatch",
    "GPT3&Table-GPT",
]

# Assume Python 3.8+.
target-version = "py38"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

[tool.ruff.lint]
# Enable specific rule sets
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings  
    "F",   # Pyflakes
    "I",   # isort
    "N",   # pep8-naming
    "UP",  # pyupgrade
    "B",   # flake8-bugbear
    "A",   # flake8-builtins
    "COM", # flake8-commas
    "C4",  # flake8-comprehensions
    "PIE", # flake8-pie
    "SIM", # flake8-simplify
    "RET", # flake8-return
    "ARG", # flake8-unused-arguments
    "PTH", # flake8-use-pathlib
    "ERA", # eradicate
    "PL",  # Pylint
    "RUF", # Ruff-specific rules
]

# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Ignore overly restrictive rules
ignore = [
    "ANN101",  # Missing type annotation for `self` in method
    "ANN102",  # Missing type annotation for `cls` in classmethod  
    "ANN201",  # Missing return type annotation for public function
    "ANN202",  # Missing return type annotation for private function
    "ANN204",  # Missing return type annotation for special method
    "ANN205",  # Missing return type annotation for staticmethod
    "ANN206",  # Missing return type annotation for classmethod
    "RUF013",  # PEP 484 prohibits implicit Optional (ignore for now)
    "S101",    # Use of `assert` detected
    "S301",    # `pickle` and modules that wrap it can be unsafe
    "S608",    # Possible SQL injection vector through string-based query construction
    "E501",    # Line too long (handled by formatter)
    "E402",    # Module level import not at top of file (common in research scripts)
    "E741",    # Ambiguous variable name (l is common for label)
    "PLR0913", # Too many arguments to function call
    "PLR0912", # Too many branches
    "PLR0915", # Too many statements
    "PLR0911", # Too many return statements
    "PLR2004", # Magic value used in comparison
    "COM812",  # Missing trailing comma (handled by formatter)
    "ISC001",  # Implicitly concatenated string literals (handled by formatter)
    "FBT001",  # Boolean positional arg in function definition
    "FBT002",  # Boolean default arg in function definition
    "N806",    # Variable in function should be lowercase
    "N803",    # Argument should be lowercase
    "N802",    # Function name should be lowercase
    "N816",    # Variable should not be mixedCase (common in data science)
    "BLE001",  # Do not catch blind exception
    "TRY003",  # Avoid specifying long messages outside the exception class
    "EM101",   # Exception must not use a string literal, assign to variable first
    "EM102",   # Exception must not use an f-string literal, assign to variable first
    "E722",    # Do not use bare except (too restrictive for research code)
    "PTH123",  # open() should be replaced by Path.open() (ignore for simplicity)
    "PTH110",  # os.path.exists() should be replaced by Path.exists() (ignore for simplicity)
    "PTH103",  # os.makedirs() should be replaced by Path.mkdir() (ignore for simplicity)
    "PTH107",  # os.remove() should be replaced by Path.unlink() (ignore for simplicity)
    "PTH108",  # os.unlink() should be replaced by Path.unlink() (ignore for simplicity)
    "PTH109",  # os.getcwd() should be replaced by Path.cwd() (ignore for simplicity)
    "PTH111",  # os.path.expanduser() should be replaced by Path.expanduser() (ignore for simplicity)
    "PTH120",  # os.path.dirname() should be replaced by Path.parent (ignore for simplicity)
    "PLC0415", # import should be at the top-level (ignore for conditional imports)
    "PLC0206", # Extract value from dictionary without calling .items() (too pedantic)
    "B904",    # Within except clause, raise exceptions with raise ... from err (too verbose)
    "B007",    # Loop control variable not used within loop body (common pattern)
    "B023",    # Function definition does not bind loop variable (common pattern)
    "ARG002",  # Unused method argument (common in research/experimentation)
    "SIM115",  # Use a context manager for opening files (ignore for one-liners)
    "SIM102",  # Use a single if statement (personal preference)
    "SIM108",  # Use ternary operator (personal preference)
    "PLW2901", # for loop variable overwritten by assignment target (common pattern)
]

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.per-file-ignores]
# Tests can use more relaxed rules
"test_*.py" = ["S101", "PLR2004", "ANN", "ARG"]
"**/test_*.py" = ["S101", "PLR2004", "ANN", "ARG"]

[tool.ruff.lint.isort]
# Use a single line between direct and from import
lines-between-types = 1

[tool.ruff.lint.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 15 